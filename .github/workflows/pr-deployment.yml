name: Deploy on pr branch

on:
  issue_comment:
    types: [created]

jobs:
  get-comment:
    runs-on: ubuntu-latest
    steps:
      - name: Execute a comment command
        id: check
        uses: khan/pull-request-comment-trigger@master
        with:
          trigger: '/release'
          reaction: rocket
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
    outputs:
      triggered: ${{ steps.check.outputs.triggered }}

  deploy:
    runs-on: ubuntu-latest
    needs: get-comment
    if: needs.get-comment.outputs.triggered == 'true'
    steps:
      - name: Get pull request ref
        id: get_pull_request_ref
        uses: octokit/request-action@v2.x
        with:
          route: GET /repos/:repository/pulls/:issue_id
          repository: ${{ github.repository }}
          issue_id: ${{ github.event.issue.number }}
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

      - name: Create deployment
        id: create_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments
          repository: ${{ github.repository }}
          ref: ${{ fromJson(steps.get_pull_request_ref.outputs.data).head.ref }}
          environment: beta
          auto_merge: false
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

      - name: Set deployment status to in progress
        id: start_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments/:deployment/statuses
          repository: ${{ github.repository }}
          deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          state: in_progress
          mediaType: '{"previews": ["flash", "ant-man"]}'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

      - name: Get pr branch
        uses: octokit/request-action@v2.x
        id: get_pr_branch
        with:
          route: GET /repos/{owner}/{repository}/pulls/{pull_number}
          owner: ${{ context.repo.owner }}
          repository: ${{ context.repo.repo }}
          pull_number: ${{ context.issue.number }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ fromJSON(steps.get_pr_branch.outputs.result).head.sha }}
          repository: ${{ fromJSON(steps.get_pr_branch.outputs.result).head.repo.full_name }}

      - uses: actions/cache@v2
        with:
          path: '**/node_modules'
          key: ${{ runner.os }}-modules-${{ hashFiles('**/yarn.lock') }}

      - name: Setup git user
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - uses: actions/setup-node@v2
        with:
          node-version: 12
          registry-url: 'https://registry.npmjs.org'
          scope: '@binancechain'

      - run: yarn install --frozen-lockfile
      - run: yarn lint && yarn test --ci --coverage --maxWorkers=4
      - run: yarn build

      - name: Lerna publish
        run: |
          yarn lerna publish --canary --preid "beta.$(git rev-parse --short HEAD)" --pre-dist-tag=beta -y 2>&1 | tee publish-tmp.out
          output="$(cat publish-tmp.out)"
          output="${output##*Successfully published:}"
          output="${output//'%'/'%25'}"
          output="${output//$'\n'/'%0A'}"
          output="${output//$'\r'/'%0D'}"
          echo "::set-output name=publish-log::$output";
        id: lerna_publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set deployment status to success
        id: successful_deployment
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/:repository/deployments/:deployment/statuses
          repository: ${{ github.repository }}
          deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
          environment: beta
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          mediaType: '{"previews": ["ant-man"]}'
          state: success
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

      - name: Create version comment
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.issue.number }}
          body: ${{ steps.lerna_publish.outputs.publish-log }}
          reactions: eyes, hooray, rocket
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'

      - name: Set deployment status to failure
        id: failed_deployment
        uses: octokit/request-action@v2.x
        if: failure()
        with:
          route: POST /repos/:repository/deployments/:deployment/statuses
          repository: ${{ github.repository }}
          deployment: ${{ fromJson(steps.create_deployment.outputs.data).id }}
          environment: beta
          log_url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
          mediaType: '{"previews": ["ant-man"]}'
          state: failure
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
